{"version":3,"sources":["logo.png","dohvatiPodatke.js","PrikazCijene.js","GorivoPrikaz.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","a","fetch","proxyurl","response","ok","Error","text","data","window","DOMParser","parseFromString","podaci","brojac","nazivi","getElementsByTagName","tablice","tablica","spremiRed","brojiUkupno","brojiRed","redovi","red","push","naziv","dohvatiPodatke","PrikazCijene","gorivo","prikaz","forEach","obj","index","key","scope","className","GorivoPrikaz","goriva","element","App","state","error","alt","src","logo","this","type","color","height","width","then","console","log","setState","catch","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c3fab62f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.8b63f34b.png\";","\nasync function dohvatiPodatke() {\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  let url =\"http://cijenegoriva.info/CijeneGoriva.aspx\";\n  \n  let response = await fetch(proxyurl + url);\n      if(!response.ok) {\n        throw new Error('Ups!');\n      }\n      let text = await response.text();\n  \n    let data= new window.DOMParser().parseFromString(text, \"text/html\")\n   \n         let podaci = [];\n        let brojac = 0;\n         let nazivi = data.getElementsByTagName(\"h2\");\n          const tablice = data.getElementsByTagName(\"table\");\n          for (let tablica of tablice) {\n\n           let spremiRed= [[]]\n           let brojiUkupno =0;\n           let brojiRed= 1;\n            let redovi=tablica.getElementsByTagName(\"td\")\n            for (let red of redovi) {\n              if(!spremiRed[brojiUkupno]) {\n                spremiRed.push([])\n              }\n             spremiRed[brojiUkupno].push(red[\"innerHTML\"])\n            if(brojiRed % 3 === 0 ) {\n                brojiRed=0;\n             \n             brojiUkupno++;\n           } \n             \n             brojiRed++;\n            }\n\n           podaci.push({naziv:nazivi[brojac][\"innerHTML\"], podaci: spremiRed})\n           brojac++;\n           }\n \n           return podaci;\n      \n       \n}\n\n\nexport default dohvatiPodatke;\n","import React from 'react';\n\nfunction PrikazCijene ({gorivo}) {\n    let prikaz = [];\n    gorivo.forEach((obj,index) => {\n        prikaz.push(\n        <tr key={index}>\n            <th scope=\"row\">{index+1}</th>\n            <td className=\"sirina\">{obj[0]}</td>\n            <td className=\"sirina\">{obj[1]}</td>\n            <td className=\"sirina\">{obj[2]}</td>\n\n        </tr>)\n    });\n    return (\n\n            <table className=\"table bg-light border table-striped border-rounded\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\" className=\"sirina\">Gorivo</th>\n                    <th scope=\"col\" className=\"sirina\">Benzinska</th>\n                    <th scope=\"col\" className=\"sirina\">Cijena</th>\n                </tr>\n            </thead>\n            <tbody>{prikaz}</tbody>\n            </table>\n            \n    )\n}\n\nexport default PrikazCijene;\n\n","import React from 'react';\nimport PrikazCijene from \"./PrikazCijene\";\n\n\nfunction GorivoPrikaz ({podaci}) {\n\n    let goriva = [];\n    podaci.forEach((element,index) => {\n          \n      goriva.push(\n      <div key = {index} >\n        <h5 className=\"text-center text-primary bg-light border border-primary border-rounded p-2\">{podaci[index].naziv}</h5>\n        <PrikazCijene gorivo={podaci[index].podaci}/>\n      </div>)\n      })\n      \n      return <div className=\"container py-3\">{goriva}</div>\n}\n  \n\nexport default GorivoPrikaz;\n","import React,{Component} from 'react';\nimport './App.css';\nimport dohvatiPodatke from './dohvatiPodatke';\nimport Loader from 'react-loader-spinner'\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport logo from './logo.png';\nimport GorivoPrikaz from \"./GorivoPrikaz\";\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={podaci:\"\",error:false};\n  }\n  render () {\n    return(\n      <div className=\"stranica d-flex flex-column\">\n      <div className=\"d-flex flex-column content bg-white\">\n          <nav className=\"navbar navbar-light bg-primary d-flex justify-content-center\">\n            <div className=\"text-center\">\n              \n               <img className=\"ikona p-0\" alt=\"cijene goriva\" src={logo} />\n            </div>\n             \n          </nav>\n      {this.state.podaci && !this.state.error ? \n      <div>\n      <GorivoPrikaz podaci={this.state.podaci}/>\n      </div>\n      : \n        this.state.error ? \n        <div className=\"text-center pt-4 my-auto\">\n        <h3 className=\"text-white pt-4\">Pogreška kod dohvaćanja podataka</h3>\n        </div>\n        :\n      <div className=\"text-center pt-4 my-auto\">\n      <Loader type=\"Oval\" color=\"#007bff\" height={100} width={100}/>\n      <h3 className=\"text-primary pt-4\">Dohvaćanje podataka...</h3>\n      </div>\n    \n      }\n    </div>\n          <footer className=\"footer bg-primary p-3\">\n              <div className=\"text-center\">\n                <span className=\"text-light\">cijeneGoriva</span>\n              </div>\n          </footer>\n          \n    </div>\n    )\n\n}\ncomponentDidMount() {\ndohvatiPodatke().then(podaci => {\n  console.log(podaci);\n  this.setState({podaci:podaci})\n}).catch(error=>(this.setState({error:true})))\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}